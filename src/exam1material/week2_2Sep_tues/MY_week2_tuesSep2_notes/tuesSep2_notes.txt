
Homework 1 due tonight
    last problem (Deer/Fox/Bunny) suggestions

    What are the possible cases?


I'll post Homework 2 after class (due Tues Sep 9)

/////////////////////

Today:
    
- review implies operator
- evaluating logical statements
- compound truth tables
- using Logika
- parse trees
- begin propositional logic

//////////////////////////////////////////


Review: IMPLIES operator →

"If it is snowing, then I will bring a coat"

p: It is snowing
q: I will bring a coat

p → q

When is this true? When is this false?


p q  #  p → q
--------------
T T  #    T
T F  #    F 
F T  #    T
F F  #    T

//////////////////////////////////////

Evaluating logical statements.

Basic operations:

∧ - and
∨ - Or
¬ - not
→ - implies

////////////////////////////////////////

Consider ¬p ∨ q ∧ r.

--> what operation do we do first?

!p, q and r,

Order of operations

In math? 

()
exp
mult/div
add/sub

For logic statements (∧ ∨ ¬ →)?

()
not
and
or
implies



Given this statement:

    ¬p ∨ q ∧ r




Add () to show the order of operations.


((!p) or (q and r))


Evaluate the above statement using these
variable assignments:

p is T
q is F
r is F

((!p) or (q and r))
((!T) or (F and F))
((F) or (F))
F

output is false




////////////////////////////////////////////////

Order of operations
    ¬ evaluates right to left
        ¬(¬p) is equivalent to....

p

    ∧ and ∨ evaluate left to right
        p ∧ q ∧ r is equivalent to.... ((p and q) and r)
        p ∨ q ∨ r is equivalent to.... ((p or q) or r)


    → evaluates right to left
        p → q → r is equivalent to.... (p implies (q implies r))





//////////////////////////////////////////

Top-level operator (what happens LAST?)


(((¬p) ∨ q) ∧ r)


top-level? the OR
 
How is this similar to a circuit? it's the last gate

top-level operator is the output of the entire statement


///////////////////////////////

p ∧ q ∨ r ∧ p

rewrite with ():

(p ∧ q) ∨ (r ∧ p)


top-level operator? the OR



//////////////////////////////

p ∧ q ∧ r ∧ s

rewrite with ():
((p ∧ q) ∧ r) ∧ s


top-level operator? AND s


////////////////////////////////////////////////////

In-class practice quiz

////////////////////////////////////////////////////

Listing all truth assignments for a logical statement.



If we have 2 variables, how many possible truth assignments?

    p, q
 4




If we have 3 variables, how many possible truth assignments?

    p, q, r

8

If we have n variables, how many possible truth assignments?



2^n


////////////////////////////////////////////////////

Classifying logical statements based on truth assignments.



Contingent, contradictory, tautology



contingent: sometimes true sometimes false - at least one truth assignment evaluates to true and at least one truth assignment evaluates to false

    Example? p ∨ q



contradictory: always false - every truth assignment evaluates to false

    Example? ¬p ∧ p 


tautology: always true - every truth assignment evaluates to true

    Example? ¬p ∨ p
    

///////////////////////////////////////////

∧ ∨ ¬ →

///////////////////////////////////////////

Compound truth tables.


Write a truth table for:

(p ∧ r) → (r ∨ ¬q)
                   *
------------------------------
p q r #    (p ∧ r) → (r ∨ ¬q)

T T T #
T T F #
T F T #
T F F #
F T T #
F T F #
F F T #
F F F #


-----------------------------
p q r  #  (p ∧ r) → (r ∨ ¬q)
-----------------------------
T T T #    T       T    T F
T T F #    F       T    F F
T F T #    T       T    T T
T F F #    F       T    T T
F T T #    F       T    T F
F T F #    F       T    F F
F F T #    F       T    T T
F F F #    F       T    T T
-----------------------------





--> top-level operator? implies

--> need to evaluate statement on ALL possible truth assignments

--> how many truth assignments are there?

--> how would we classify this truth table? tautology


/////////////////////////////////////////

complete truth table in truth.logika

--> what to type for different operators


AND: &
OR: |
NOT: !
IMPLIES: ->:

alignment matters!

--> order of operations in Logika

//////////////////////////////////////
Complete tautology.logika

//////////////////////////////////////

trees



parse trees

--> what are they?

--> draw one for (p ∧ q) → ¬r




--> expression trees



--> draw one for p ∨ q ∧ r → ¬p → ¬q ∨ s



--> how do they relate to programming?

--> what is the "top-level operator" here?


////////////////////////////////////////

Propositional logic.


- a set of propositional atoms (statements that can be T/F)
    --> these will be our boolean variables in logic statements



- connected by logical operators



- join together to make new propositions (logical sentences)
    that can be true or false



////////////////////////////////////////

Which ones are propositions?

Today is Thursday.


What time is it?


x == 2


Pigs can fly.


Drive carefully.


y <= 4



////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.

    q: It is snowing.

    r: y <= 4

    s: x == 2


How would we express these as English sentences?

    ¬p:


    p ∧ q:


    p → q :


    ¬p → ¬q:


    r ∨ s:

    ¬r:

////////////////////////

Next time:

- A bit more with translations
- Equivalent propositions
- DeMorgan's laws
- Equivalent if-statements
- Negating if-statements
- Proving equivalence with truth tables
- Satisfiability
