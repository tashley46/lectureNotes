HW 1 repository issues


HW 2 due Tuesday, September 9

--> will be creating 2 image files

--> make sure those are added to your git repository!

////////////////////////////

Today:
- one more parse tree / circuit
- begin propositional logic
- equivalent statements
- satisfiability

////////////////////////////////////////

Example: another parse tree

p ∧ q ∧ r → ¬p ∨ q → r

top level operator: ->: on the left

Example: another circuit

p OR q AND NOT p


//////////////////////////////////////////
∧ ∨ ¬ → 
//////////////////////////////////////////

Propositional logic.


- a set of *propositional atoms* (statements that can be T/F)
    --> these will be our boolean variables in logic statements
    --> minimal (don't contain any logical operators)



- connected by logical operators



- join together to make new *propositions* (logical sentences)
    that can be true or false



////////////////////////////////////////

Example: 

z != 7 && str.contains(sub)


--> what are the propositional atoms?

p: z == 7
q: str.contains(sub)

--> express in propositional logic

!p && q

////////////////////////////////////////

Example:

You can't enroll for the course if you haven't taken 
the prerequisite.


--> what are the propositional atoms?

p: You can enroll in the course
q: You have taken the prerequisite
--> translate to propositional logic:

really saying:

!q -> !p

What is the *contrapositive* of our statement?

p -> q

If you have enrolled in the course, then you have taken the prerequisite

//////////////////////////////////////////
∧ ∨ ¬ → 
//////////////////////////////////////////

Example:

if (x <= 2 || y >= 0) {
    if (z != 17) {
        answer = 25;
    }
}

Propositional atoms?

p: x <= 2
q: y >= 0
r: z == 17
s: answer == 25

Translation? (if ... then ...)

(p || q) && !r -> s

//////////////////////////////////

Consider these two statements:

p: I am at least 16 years old
q: I can drive a car


1) If I am at least 16 years old, then I can drive a car.

p -> q

2) I'm not at least 16 years old or I can drive a car.

!p || q

--> are they saying the same thing?

Yes, they are both false only when they're at least 16 and can't drive a car

--> could we PROVE it? (equiv1.logika, equiv2.logika)

For every possible truth assignment, the 2 statements have the same outputs

//////////////////////////////////

DeMorgan's Laws.

...DeMorgan has so many laws...
    these are a couple of them.




if (a == 4 || a == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?

a != 4 && a != 5


///

if (a == 4 && b == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?

a != 4 || a != 5



//////////////////////////////

DeMorgan's laws in propositional logic:

¬(p ∨ q) is equivalent to... !p && !q

¬(p ∧ q) is equivalent to... !p || !q


--> how can we prove the first of DeMorgan's laws?


For every possible truth assignment, the two statements had the same output


////////////////////////

Another if-statement example.


if (Character.isDigit(letter) || num < 10) {
    statements
}

--> how would we negate it without using a ! operator?
    also no extra ()

Character.isDigit(letter) == false && num >= 10

///////////////////////

And one more. Negate this one:

if ((y >= 4 && num != 14) || x > 0) {
    statements
}

negate it:

(y < 4 || num == 14) && x <=0

///////////////////////

in-class quiz

///////////////////////

Summary of important equivalences (≡ means "is equivalent to").


¬(p ∧ q) ≡ ¬p ∨ ¬q                  (DeMorgan's laws)
¬(p ∨ q) ≡ ¬p ∧ ¬q

p → q ≡  ¬q → ¬p                    (contrapositive)
p → q ≡  ¬p ∨ q                     (can turn implies into an or)


associative laws

    (2 + 3) + 5 = (3 + 5) + 2

    (p ∧ q) ∧ r     vs   p ∧ (q ∧ r)   


    (p → q) → r     vs    p → (q → r)

    how to show logically equivalent?

    implies is NOT associative 

    how to show NOT equivalent? 

    ONE counter-example

commutative laws 

p & q == q & p 
p || q == q || p
p -> q != q -> P

p = T 
q = F

--> you may still be asked to demonstrate these with
    truth tables or prove them with natural deduction (coming soon)


//////////////////////////

Summary of equivalence.

How do we prove two statements ARE equivalent?

All truth assignments from both statements produce the same output.
Two truth tables with identical outputs

How do we prove two statements are NOT equivalent?

At least one truth assignment from both statements produce different outputs.
Two truth table with at least one different output

//////////////////////////

What is equivalent to:

¬p → q

!q -> p 

p || q

//////////////////////////

Satisfiability.

- definition: When there is at least one truth assignment combination that makes the output true


- what kind of statement is satisfiable? what kind is not?

Satisfiable: Contingent, tautology
Non-satisfiable: Contradictory
- is this satisfiable?

    (p ∨ ¬q) ∧ (q ∨ ¬r) ∧ (r ∨ ¬p)

p: T
q: T
r: T


to show a statement is satisifiable: one of the outputs is true (one example/counter-example)

to show a statement is NOT satisfiable: none of the outputs are true (use truth table)


////////////////////////////

SAT

straightforward approach to checking all possibilities:




- Aside: P and NP problems

running time programs

can we solve a problem in polynomial time?

can we check a solution to a problem in polynomial time?



////////////////////////

Next time:
- how to prove an argument

